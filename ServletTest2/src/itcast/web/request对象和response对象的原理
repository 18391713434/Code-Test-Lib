request对象和response对象：


##Request:
    1、request对象和response对象的原理
        1、request和response对象都是由服务器创建的。我们来使用它们
        2、request对象是来获取请求消息的，response对象是来设置响应消息的


@WebServlet("/dmo1")
public class ServletDemo1 implements Servlet {
    @Override
    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {

    }
}
http://localhost/day14/demo1-------请求（请求消息）--》    1、tomcat服务器会根据请求url中的资源路径，创建对应的ServletDemo1对象。
                                                          2、tomcat服务器，会创建request和response对象，request对象中封装请求消息数据
                                                          3、tomcat将request和response两个对象创建给service方法，并且调用service方法。
                                                          4、程序员可以通过request对象获取请求消息数据，通过response对象设置响应消息数据
                                                          5、服务器在给浏览器作出响应之前，会从response对象中拿程序员设置的响应消息数据


      2、request对象继承体系结构：
        ServletRequest     --------接口
            |继承
        HttpServletRequest   ---------接口
            |实现
        org.apache.catalina.connector.RequestFacade   类（tomcat创建）可打开tomcat源码查看


      3、request：
              1、获取请求消息数据
                1、获取请求行数据
                    *   GET/demo1?name=zhangsan HTTP/1.1
                    *方法：
                        1、获取请求方式：GET
                            *String getMethod
                      * 2、获取虚拟目录：/day14
                            *String getContextPath()
                        3、获取Servlet路径：/demo1
                            *String getServletPath()
                        4、获取get请求方式请求参数：name=zhangsan
                            *String getQueryString()
                      * 5、获取请求URI：/day14/demo1
                            *String getRequestURI():  /day14/demo1
                            *StringBuffer getRequestURL():  http://localhost/day14/demo1
                        6、获取协议及版本：HTTP/1.1
                            *String getProtocol()
                        7、获取客户机的IP地址：
                            *String getRemoteAddr()

                        *URL:统一资源定位符：http://localhost/Test/RequestDemo1   中华人民共和国
                        *URI:同一资源标识符：/Test/RequestDemo1       共和国






                2、获取请求头数据
                    *方法：
                        *String getHeader(String name):通过请求头的名称获取请求头的值
                        *Enumeration<String> getHeaderNames():获取所有请求头的名称    返回继承于迭代器的接口实现类  可当作迭代器使用



                3、获取请求体数据
                    *请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数
                    *步骤：
                        1、获取流对象    字节流和字符流
                            *BufferedReader getReader():获取字符输入流，只能操作字符数据
                            *ServletInputStream getInputStream():获取字节输入流，可以操作所有类型数据
                                *文件上传知识点讲解
                        2、再从流对象中拿数据

              2、其他功能：
                    1、获取请求参数通用方式:无论get还是post请求都可以用以下方式获取请求参数
                       1、String getParameter(String name):根据参数名称获取参数值
                       2、String[] getParameterValues(String name)：根据参数名称获取参数值的数组   hobby=xx&hobby=xx
                       3、Enumeration<String> getParameterNames(): 获取所有请求的参数名称
                       4、Map<String,String[]>getParameterMap():获取所有参数的Map集合

                       *中文乱码问题：
                        *get方式：tomcat8已经将get方式乱码问题解决了
                        *post方式：会乱码
                            *解决：在获取参数前，设置request的编码
                              //设置流的编码
                                    req.setCharacterEncoding("utf-8");




                    2、请求转发：一种服务器内部的资源跳转方式   在/Test目录下的AServlet向BServlet跳转
                        1、步骤：
                            1、通过request对象获取请求跳转器对象：RequestDispatcher getRequestDispatcher(String path);
                            2、使用RequestDispatcher对象来进行转发：forward(ServletRequest req, ServletResponse resp);
                        2、特点：
                            1、浏览器地址栏路径不发生变化
                            2、只能转发到当前服务器内部资源中
                            3、转发是一次请求

                    3、共享数据
                        *域对象：一个有作用范围的对象，可以在范围内共享数据
                        *request域：表示一次请求的范围，一般用于请求转发的多个资源中共享数据
                        *方法：
                            1、setAttribute(String name,Object obj):存储数据
                            2、getAttribute(String name):通过键获取值
                            3、removeAttribute(String name):移除键值对



                    4、获取ServletContext
                        *ServletContext getServletcontext()



    *BeanUtils工具类 简化数据封装  一般放在Domain包内
        *用于封装JavaDean的
        1、JavaBean ：标准的Java类
            1、类必须是public修饰
            2、必须提供空参的构造器
            3、成员变量必须使用private构造
            4、提供公共setter和getter方法
        2、功能：封装数据
      概念：
        成员变量：
        属性：setter和getter方法截取后的产物
                例如：getUsername()--->Username--->username
      方法：
            1、setProperty()  设置属性值
            2、getProperty()  获取属性值
            3、populate（Object obj，Map map）:将map集合的键值对信息，封装到对应的JavaBean对象中  自动解析map     获取JavaBean



1、HTTP协议：响应消息
        1、请求消息：客户端发送给服务器的数据
            *数据格式：
                1、请求行
                2、请求头
                3、请求空行
                4、请求体
        2、响应消息：服务器发送给客户端的数据
            *数据格式：
                1、响应行
                    1、组成：协议/版本  响应状态码  状态码描述
                    2、响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。
                            1、状态码都是三位数
                            2、分类：
                                  1、1XX ：服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1XX多状态码
                                  2、2XX ： 成功 代表：200
                                  3、3XX ： 重定向 代表：302（重定向）304（访问缓存）
                                  4、4XX ： 客户端错误  代表:404(请求路径没有对应的资源)  405(请求方式没有对应的doXXX方法)
                                  5、5XX ：服务器端错误   500（服务器内部出现异常）
                2、响应头
                    1、格式：头名称：值
                    2、常见的响应头：
                        1、Content-Type:服务器告诉客户端本次响应体数据格式以及编码格式
                        2、Content_disposition:服务器告诉客户端以什么格式打开请求体数据
                                *值：
                                    * in-line:默认值，在当前页面内打开
                                    *attachment;filename-xxx:以附加形式打开响应体。文件下载

                3、响应空行

                4、响应体
                       返回数据
           响应字符串格式：
           HTTP/1.1 200 OK
           Server: nginx
           Date: Sat, 15 Feb 2020 05:34:31 GMT
           Content-Type: text/html; charset=UTF-8
           Transfer-Encoding: chunked
           Connection: keep-alive
           Vary: Accept-Encoding
           Set-Cookie: cookie_referer=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0; path=/; domain=xiaoe-tech.com
           Set-Cookie: channel=homepage; expires=Sun, 14-Feb-2021 05:34:31 GMT; Max-Age=31536000; path=/; domain=xiaoe-tech.com
           Set-Cookie: cookie_session_id=ALK7qdlv7XeAOm1JJKWX594J4yNjwidA; expires=Sun, 14-Feb-2021 05:34:31 GMT; Max-Age=31536000; path=/; domain=xiaoe-tech.com
           Cache-Control: no-cache
           Content-Encoding: gzip
           响应头字符串格式：
           Connection: keep-alive
           Content-Length: 107
           Content-Type: text/html;charset=UTF-8
           Date: Sat, 15 Feb 2020 06:25:59 GMT
           Keep-Alive: timeout=20


           <html>
             <head>
               <title>$Title$</title>
             </head>
             <body>
             Hello Response
             $END$
             </body>
           </html>








2、Response对象

        *功能：设置响应消息
                1、设置响应行
                    1、格式：HTTP/1.1 200 ok
                    2、设置状态码：setStatus(int sc)
                2、设置响应头
                     setHeader(String name,String value)
                3、设置响应体
                    *使用步骤：
                    1、获取输出流
                        *字符输出流    PrintWriter  getWriter()
                        *字节输出流    ServletOutputStream  getOutputStream()
                    2、使用输出流，将数据输出到客户端浏览器
            案例：
                1、完成重定向：  1、告诉浏览器重定向，状态码302   2、告诉浏览器B资源的路径，响应头location：B资源的路径
                        *重定向特点：redirect
                               1、地址栏发生变化
                               2、重定向可以访问其他站点的资源
                               3、重定向是两次请求 所以不能使用request域保存数据
                        *转发特点： forward
                               1、转发地址栏不发生变化
                               2、转发只能访问当前服务器下的资源
                               3、转发是一次请求   可以使用request域保存数据
                        *forward和redirect区别
                        *路径写法：
                            1、路径分类
                                1、相对路径：通过相对路径不可以确定唯一资源
                                        *如：./index.html
                                        *不以/开头，以.开头路径
                                        *规则：找到当前资源和目标资源之间的相对位置关系
                                            * ./:当前目录
                                            * ../:后退一级目录
                                2、绝对路径：可以通过绝对路径确定唯一资源
                                    *如：http://localhost/Test/responseDemo1
                                    *以/开头的路径
                                    *规则： 判断定义的路径是给谁用的？
                                        *给客户端浏览器使用：需要加虚拟目录（项目的访问路径）
                                                 推荐使用动态虚拟目录  String contextPath = request.getContextPath();                                                                                                                  response.sendRedirect(contextPath+"/responseDemo2");
                                        *给服务器使用：不需要加虚拟目录


                2、服务器输出字符数据到浏览器
                        *步骤：
                            1、获取字符输出流
                            2、输出数据
                 *注意：   解决中文乱码问题：  /*在获取流对象之前，设置流编码为GBK*/
                                     response.setCharacterEncoding("utf-8");
                                     //告诉浏览器，服务器发送的消息体数据的编码，建议浏览器使用该编码解码
                                     //response.setHeader("content-type","text/html;charset=utf-8");
                                     response.setContentType("text/html;charset=utf-8");

                3、服务器输出字节数据到浏览器
                        *步骤：
                            1、获取字节输出流
                            2、输出数据


                4、验证码
                        *步骤详见CheckCodeServlet


3、ServletContext对象
        1、代表整个Web应用，可以和程序的容器（服务器）来同信
        2、获取：
            1、通过request对象获取
               reques.getServletContext();
            2、通过HttpServlet获取
                this.getServletContext();


        3、功能：
            1、获取MIME类型
                *MIME类型：在互联网通信过程定义的一种文件数据结构
                    *格式：大类型/小类型   text/html     image/jpeg

            2、域对象：共享数据
                1、setAttribute(String name,Object value);
                2、getAttribute(String name)
                3、removeAttribute(String name)
                *ServletContext对象范围，所有用户所有请求的数据
            3、获取文件的真实（服务器）路径
                        方法：String  getRealPath(String Path)

            案例：
                *文件下载需求：
                    1、页面显示超链接
                    2、点击超链接后弹出下载提示框
                    3、完成图片文件下载
                分析：
                    1、超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能系欸小，则弹出下载框
                    2、使用任何资源都必须弹出下载提示框
                    3、使用响应头设置资源的打开方式：
                            *content-disposition:attachment;filename=xxx

                 *步骤：
                    1、定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename
                    2、定义servlet
                        1、获取文件名称
                        2、使用字节输入流加载文件进内存
                        3、指定response的响应头
                        4、将数据写出到response的输出流
                  *问题：
                        *中文文件问题：
                          解决思路：1、获取浏览器使用的浏览器版本信息
                                    2、根据不同的版本信息，响应不同的数据 设置filename的编码方式不同